package password.generator;

import java.util.Random;
import java.util.Scanner;

public class PasswordGenerator {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Ask the user for username and current password
        System.out.println("Enter your username: ");
        System.out.println("I'm just curious...");
        String username = scanner.nextLine();

        System.out.println("Enter your current password: ");
        System.out.println("I promise I won't tell ;D");
        String currentPassword = scanner.nextLine();

        // Evaluate password strength
        evaluatePasswordStrength(currentPassword, username);

        // Generate a new, more secure password
        String newPassword = generateNewPassword(currentPassword, username);

        // Print the new password
        System.out.println("\nYour new password is: " + newPassword);
        System.out.println("Or is it?? Did I change it? Or is this just a suggestion...");
        System.out.println("I'll never tell!");

        // Close the scanner to prevent resource leaks
        scanner.close();
    }

    // Function to evaluate password strength
    private static void evaluatePasswordStrength(String password, String username) {
        if (password.length() >= 8 && password.length() <= 16
                && containsUppercase(password)
                && containsSpecialCharacter(password)
                && !password.contains(username)
                && !password.equals(username)) {
            System.out.println("Your current password meets the strength criteria.");
        } else {
            System.out.println("Your current password does not meet the strength criteria.");
        }
    }

    // Function to generate a new, more secure password
    private static String generateNewPassword(String currentPassword, String username) {
        Random random = new Random();

        String newPassword;
        do {
            StringBuilder newPasswordBuilder = new StringBuilder();

            // Generate a random length between 8 and 16 characters
            int newPasswordLength = random.nextInt(9) + 8;

            // Generate a new password with at least one uppercase letter and one special character
            for (int i = 0; i < newPasswordLength; i++) {
                char randomChar = generateRandomChar();
                newPasswordBuilder.append(randomChar);
            }

            // Ensure the new password meets all criteria
            newPassword = newPasswordBuilder.toString();
        } while (newPassword.equals(currentPassword)
                || newPassword.contains(username)
                || !containsUppercase(newPassword)
                || !containsSpecialCharacter(newPassword));

        return newPassword;
    }

    // Function to check if a string contains at least one uppercase letter
    private static boolean containsUppercase(String str) {
        for (char ch : str.toCharArray()) {
            if (Character.isUpperCase(ch)) {
                return true;
            }
        }
        return false;
    }

    // Function to check if a string contains at least one special character
    private static boolean containsSpecialCharacter(String str) {
        String specialCharacters = "!@#$%^&*()-_+=<>?";

        for (char ch : str.toCharArray()) {
            if (specialCharacters.contains(String.valueOf(ch))) {
                return true;
            }
        }
        return false;
    }

    // Function to generate a random uppercase letter or special character
    private static char generateRandomChar() {
        String characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()-_+=<>?";
        Random random = new Random();
        return characters.charAt(random.nextInt(characters.length()));
    }
}
